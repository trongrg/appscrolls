module ConfigMapper
  def method_missing(method, *args, &block)
    method = method.to_s
    if method.gsub!(/=$/, '')
      self[method] = args.first
    else
      if self.has_key?(method)
        self[method].extend ConfigMapper if self[method].is_a? Hash
      else
        self[method] = {}
        self[method].extend ConfigMapper
      end
      self[method]
    end
  end
end

module Rails::Generators::Actions
  def gem_group(*names, &block)
    name = names.flatten.map(&:inspect).join(", ")
    log :gemfile, "group #{name}"

    in_root do
      regex = /(\ngroup #{name} do((?!end).)*)\nend\n/m
      if match = File.read("Gemfile").match(regex)
        gsub_file "Gemfile", regex , ""
        append_file "Gemfile", match[1]
      else
        append_file "Gemfile", "\ngroup #{name} do", :force => true
      end
      @in_group = true
      instance_eval(&block)
      @in_group = false
      append_file "Gemfile", "\nend\n", :force => true
    end
  end

  def gem(*args)
    options = args.extract_options!
    name, version = args
    if group = options.delete(:group)
      gem_group group do
        gem name, version, options
      end
    else
      # Set the message to be shown in logs. Uses the git repo if one is given,
      # otherwise use name (version).
      parts, message = [ name.inspect ], name

      if version ||= options.delete(:version)
        parts   << version.inspect
        message << " (#{version})"
      end
      message = options[:git] if options[:git]

      log :gemfile, message

      options.each do |option, value|
        parts << ":#{option} => #{value.inspect}"
      end

      in_root do
        str = "gem #{parts.join(", ")}"
        str = "  " + str if @in_group
        str = "\n" + str
        append_file "Gemfile", str, :verbose => false
      end
    end
  end
end

def scrolls; @scrolls end
def scroll?(name); @scrolls.include?(name) end

def say_custom(tag, text); say "\033[1m\033[36m" + tag.to_s.rjust(10) + "\033[0m" + "  #{text}" end
def say_scroll(name); say "\033[1m\033[36m" + "scroll".rjust(10) + "\033[0m" + "  Running #{name} scroll..." end
def say_wizard(text); say_custom(@current_scroll || 'wizard', text) end

def ask_wizard(question)
  ask "\033[1m\033[30m\033[46m" + (@current_scroll || "prompt").rjust(10) + "\033[0m\033[36m" + "  #{question}\033[0m"
end

def yes_wizard?(question)
  answer = ask_wizard(question + " \033[33m(y/n)\033[0m")
  case answer.downcase
    when "yes", "y"
      true
    when "no", "n"
      false
    else
      yes_wizard?(question)
  end
end

def no_wizard?(question); !yes_wizard?(question) end

def multiple_choice(question, choices)
  say_custom('question', question)
  values = {}
  choices.each_with_index do |choice,i|
    values[(i + 1).to_s] = choice[1]
    say_custom (i + 1).to_s + ')', choice[0]
  end
  answer = ask_wizard("Enter your selection:") while !values.keys.include?(answer)
  values[answer]
end

# Is the current ruby jruby?
def jruby?
  @jruby ||= `ruby -v` =~ /^jruby/
end

def project_name
  @project_name ||= File.basename(File.expand_path("."))
end

alias :app_name :project_name

def define_callback(name)
  var = "@#{name}_blocks"
  instance_variable_set(var, [])
  eigenclass = class << self; self; end
  eigenclass.send :define_method, name.to_sym do |&block|
    instance_variable_get(var) << [@current_scroll, block]
  end
end

def execute_callbacks name
  say_wizard "Running #{name} callbacks."
  instance_variable_get("@#{name}_blocks").each do |current_scroll, block|
    say_wizard "Running #{current_scroll} #{name} callbacks"
    @current_scroll = current_scroll
    block.call
    git_commit("recipe : #{current_scroll} (#{name})") if use_git?
  end
  @current_scroll = nil
end

def use_git?
  @use_git ||= @scrolls.include?('git') || File.exists?('.git')
end

def git_commit(message)
  `git add -A .`
  `git commit -am "#{message}"`
end

def scroll key, &block
  @current_scroll = key
  yield(@configs[key] ||= {})
end

